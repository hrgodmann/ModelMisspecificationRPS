# dat <- read.csv("/Users/henrikgodmann/Desktop/workspace/GitHub/MPTforRPS/data/real/dat_dice.csv")
dat_real <- read.csv("/Users/henrikgodmann/Desktop/GitHub/ModelMisspecificationRPS/data/real_data/real_data.csv")
dat <- dat_real
dat$PlayerPrevChoice <- c(0, dat$Chiara[1:nrow(dat)-1])
dat$OpponentPrevChoice <- c(0, dat$Mona[1:nrow(dat)-1])
dat
stan_data <- list(N = nrow(dat),
choices = dat$Chiara,
prev_choices = dat$PlayerPrevChoice,
opp_choices = dat$OpponentPrevChoice
)
# Fit model
fit <- sampling(stan_model, data = stan_data, chains = 2, iter = 2000, cores = 2, warmup = 500, control = list(adapt_delta = 0.99, max_treedepth = 17))
# posterior samples
posterior_samples <- rstan::extract(fit)
posterior_df <- data.frame(
g = posterior_samples$g,
r = posterior_samples$r,
c = posterior_samples$c
)
# prior for plot
beta_prior <- function(x) dbeta(x, shape1 = 1, shape2 = 1)
# Plot for c with prior
plot_g <- ggplot(posterior_df, aes(x = g)) +
geom_density(fill = "skyblue", alpha = 0.5) +
stat_function(fun = beta_prior, color = "black", size = 1) +
labs(title = "Prior and Posterior Distribution of g",
x = "g",
y = "Density") +
theme_minimal() +
xlim(0, 1) +
ylim(0, 8)
# Plot for r with prior
plot_r <- ggplot(posterior_df, aes(x = r)) +
geom_density(fill = "lightgreen", alpha = 0.5) +
stat_function(fun = beta_prior, color = "black", size = 1) +
labs(title = "Prior and Posterior Distribution of r",
x = "r",
y = "Density") +
theme_minimal() +
xlim(0, 1) +
ylim(0, 7.5)
# Plot for u with prior
plot_c <- ggplot(posterior_df, aes(x = c)) +
geom_density(fill = "salmon", alpha = 0.5) +
stat_function(fun = beta_prior, color = "black", size = 1) +
labs(title = "Prior and Posterior Distribution of c",
x = "c",
y = "Density") +
theme_minimal() +
xlim(0, 1) +
ylim(0, 7.5)
plot_combined <- plot_g + plot_r + plot_c + plot_layout(ncol = 3)
plot_combined
# dat <- read.csv("/Users/henrikgodmann/Desktop/workspace/GitHub/MPTforRPS/data/real/dat_dice.csv")
dat_real <- read.csv("/Users/henrikgodmann/Desktop/GitHub/ModelMisspecificationRPS/data/real_data/real_data.csv")
dat <- dat_real
dat$PlayerPrevChoice <- c(0, dat$Player_A[1:nrow(dat)-1])
dat$PlayerPrevChoice <- c(0, dat$Chiara[1:nrow(dat)-1])
dat$OpponentPrevChoice <- c(0, dat$Mona[1:nrow(dat)-1])
# dat <- read.csv("/Users/henrikgodmann/Desktop/workspace/GitHub/MPTforRPS/data/real/dat_dice.csv")
dat_real <- read.csv("/Users/henrikgodmann/Desktop/GitHub/ModelMisspecificationRPS/data/real_data/real_data.csv")
dat <- dat_real
dat
dat$PlayerPrevChoice <- c(0, dat$Chiara[1:nrow(dat)-1])
dat$OpponentPrevChoice <- c(0, dat$Mona[1:nrow(dat)-1])
dat
dat
# Determine winner (1 = Chiara wins, -1 = Mona wins, 0 = draw)
rps_winner <- function(p1, p2) {
if (p1 == p2) return(0)  # Draw
if ((p1 == 1 & p2 == 3) | (p1 == 2 & p2 == 1) | (p1 == 3 & p2 == 2)) return(1) else return(-1)
}
dat <- dat %>%
mutate(
Winner = mapply(rps_winner, Chiara, Mona),
ChiaraRepeated = lag(Chiara) == Chiara,
MonaRepeated = lag(Mona) == Mona
)
# Convert data to long format for ggplot
dat_long <- dat %>%
select(Round, Winner, ChiaraRepeated, MonaRepeated) %>%
pivot_longer(cols = c(ChiaraRepeated, MonaRepeated),
names_to = "Player", values_to = "Repeated") %>%
mutate(Player = ifelse(Player == "ChiaraRepeated", "Chiara", "Mona"))
# Plot repetition rate after winning or losing
ggplot(dat_long, aes(x = factor(Winner), fill = Repeated)) +
geom_bar(position = "fill") +
facet_wrap(~Player) +
scale_x_discrete(labels = c("-1" = "Lost", "0" = "Draw", "1" = "Won")) +
scale_fill_manual(values = c("TRUE" = "blue", "FALSE" = "gray")) +
labs(x = "Previous Round Outcome", y = "Proportion of Repeated Choices",
title = "Did Players Repeat Their Choices After Winning or Losing?",
fill = "Repeated") +
theme_minimal()
source("/Users/henrikgodmann/Desktop/GitHub/functions/Rcolors.R")
# Plot repetition rate after winning or losing
ggplot(dat_long, aes(x = factor(Winner), fill = Repeated)) +
geom_bar(position = "fill") +
facet_wrap(~Player) +
scale_x_discrete(labels = c("-1" = "Lost", "0" = "Draw", "1" = "Won")) +
scale_fill_manual(values = c("TRUE" = my_blue, "FALSE" = "gray")) +
labs(x = "Previous Round Outcome", y = "Proportion of Repeated Choices",
title = "Did Players Repeat Their Choices After Winning or Losing?",
fill = "Repeated") +
theme_minimal()
# Plot repetition rate after winning or losing
ggplot(dat_long, aes(x = factor(Winner), fill = Repeated)) +
geom_bar(position = "fill") +
facet_wrap(~Player) +
scale_x_discrete(labels = c("-1" = "Lost", "0" = "Draw", "1" = "Won")) +
scale_fill_manual(values = c("TRUE" = my_blue, "FALSE" = my_red)) +
labs(x = "Previous Round Outcome", y = "Proportion of Repeated Choices",
title = "Did Players Repeat Their Choices After Winning or Losing?",
fill = "Repeated") +
theme_minimal()
# Plot repetition rate after winning or losing
ggplot(dat_long, aes(x = factor(Winner), fill = Repeated)) +
geom_bar(position = "fill") +
facet_wrap(~Player) +
scale_x_discrete(labels = c("-1" = "Lost", "0" = "Draw", "1" = "Won")) +
scale_fill_manual(values = c("TRUE" = my_blue, "FALSE" = my_red_light)) +
labs(x = "Previous Round Outcome", y = "Proportion of Repeated Choices",
title = "Did Players Repeat Their Choices After Winning or Losing?",
fill = "Repeated") +
theme_minimal()
# Plot repetition rate after winning or losing
ggplot(dat_long, aes(x = factor(Winner), fill = Repeated)) +
geom_bar(position = "fill") +
facet_wrap(~Player) +
scale_x_discrete(labels = c("-1" = "Lost", "0" = "Draw", "1" = "Won")) +
scale_fill_manual(values = c("TRUE" = my_blue, "FALSE" = my_orange)) +
labs(x = "Previous Round Outcome", y = "Proportion of Repeated Choices",
title = "Did Players Repeat Their Choices After Winning or Losing?",
fill = "Repeated") +
theme_minimal()
ggplot(dat_long, aes(x = factor(Winner), fill = Repeated)) +
geom_bar(position = "fill") +
facet_wrap(~Player) +
scale_x_discrete(labels = c("-1" = "Lost", "0" = "Draw", "1" = "Won")) +
scale_fill_manual(values = c("TRUE" = my_blue, "FALSE" = my_magenta)) +
labs(x = "Previous Round Outcome", y = "Proportion of Repeated Choices",
title = "Did Players Repeat Their Choices After Winning or Losing?",
fill = "Repeated") +
theme_minimal()
# Plot repetition rate after winning or losing
ggplot(dat_long, aes(x = factor(Winner), fill = Repeated)) +
geom_bar(position = "fill") +
facet_wrap(~Player) +
scale_x_discrete(labels = c("-1" = "Lost", "0" = "Draw", "1" = "Won")) +
scale_fill_manual(values = c("TRUE" = my_blue, "FALSE" = my_magenta_light)) +
labs(x = "Previous Round Outcome", y = "Proportion of Repeated Choices",
title = "Did Players Repeat Their Choices After Winning or Losing?",
fill = "Repeated") +
theme_minimal()
# Plot repetition rate after winning or losing
ggplot(dat_long, aes(x = factor(Winner), fill = Repeated)) +
geom_bar(position = "fill") +
facet_wrap(~Player) +
scale_x_discrete(labels = c("-1" = "Lost", "0" = "Draw", "1" = "Won")) +
scale_fill_manual(values = c("TRUE" = my_blue_light, "FALSE" = my_red_light)) +
labs(x = "Previous Round Outcome", y = "Proportion of Repeated Choices",
title = "Did Players Repeat Their Choices After Winning or Losing?",
fill = "Repeated") +
theme_minimal()
ggplot(dat_long, aes(x = factor(Winner), fill = Repeated)) +
geom_bar(position = "dodge") +  # Use "dodge" instead of "fill" for better visibility
facet_wrap(~Player) +
scale_x_discrete(labels = c("-1" = "Lost", "0" = "Draw", "1" = "Won")) +
scale_fill_manual(values = c("TRUE" = "blue", "FALSE" = "gray")) +
labs(x = "Previous Round Outcome", y = "Count of Repeated Choices",
title = "Did Players Repeat Their Choices After Winning or Losing?",
fill = "Repeated") +
theme_minimal()
ggplot(dat_long, aes(x = factor(Winner), fill = Repeated)) +
geom_bar(position = "dodge") +  # Use "dodge" instead of "fill" for better visibility
facet_wrap(~Player) +
scale_x_discrete(labels = c("-1" = "Lost", "0" = "Draw", "1" = "Won")) +
scale_fill_manual(values = c("TRUE" = my_green, "FALSE" = my_red)) +
labs(x = "Previous Round Outcome", y = "Count of Repeated Choices",
title = "Did Players Repeat Their Choices After Winning or Losing?",
fill = "Repeated") +
theme_minimal()
ggplot(dat_long %>% filter(Round > 1), aes(x = factor(Winner), fill = Repeated)) +
geom_bar(position = "dodge") +  # Use "dodge" instead of "fill" for better visibility
facet_wrap(~Player) +
scale_x_discrete(labels = c("-1" = "Lost", "0" = "Draw", "1" = "Won")) +
scale_fill_manual(values = c("TRUE" = "blue", "FALSE" = "gray")) +
labs(x = "Previous Round Outcome", y = "Count of Repeated Choices",
title = "Did Players Repeat Their Choices After Winning or Losing?",
fill = "Repeated") +
theme_minimal()
ggplot(dat_long %>% filter(Round > 1), aes(x = factor(Winner), fill = Repeated)) +
geom_bar(position = "dodge") +  # Use "dodge" instead of "fill" for better visibility
facet_wrap(~Player) +
scale_x_discrete(labels = c("-1" = "Lost", "0" = "Draw", "1" = "Won")) +
scale_fill_manual(values = c("TRUE" = my_green, "FALSE" = my_red)) +
labs(x = "Previous Round Outcome", y = "Count of Repeated Choices",
title = "Did Players Repeat Their Choices After Winning or Losing?",
fill = "Repeated") +
theme_minimal()
# Determine winner (1 = Chiara wins, -1 = Mona wins, 0 = draw)
rps_winner <- function(p1, p2) {
if (p1 == p2) return(0)  # Draw
if ((p1 == 1 & p2 == 3) | (p1 == 2 & p2 == 1) | (p1 == 3 & p2 == 2)) return(1) else return(-1)
}
dat <- dat %>%
mutate(
Winner = mapply(rps_winner, Chiara, Mona),
ChiaraRepeated = lag(Chiara) == Chiara,
MonaRepeated = lag(Mona) == Mona
)
# Convert data to long format for ggplot
dat_long <- dat %>%
select(Round, Winner, ChiaraRepeated, MonaRepeated) %>%
pivot_longer(cols = c(ChiaraRepeated, MonaRepeated),
names_to = "Player", values_to = "Repeated") %>%
mutate(Player = ifelse(Player == "ChiaraRepeated", "Chiara", "Mona"))
dat_summary <- dat_long %>%
group_by(Winner, Player) %>%
summarise(PropRepeated = mean(Repeated, na.rm = TRUE), .groups = "drop")
# Plot
ggplot(dat_summary, aes(x = factor(Winner), y = PropRepeated, fill = Player)) +
geom_col(position = "dodge") +
geom_hline(yintercept = 1/3, linetype = "dashed", color = "red", linewidth = 1) +  # Add 1/3 reference line
scale_x_discrete(labels = c("-1" = "Lost", "0" = "Draw", "1" = "Won")) +
scale_fill_manual(values = c("Chiara" = "blue", "Mona" = "purple")) +
labs(x = "Previous Round Outcome", y = "Proportion of Repeated Choices",
title = "Did Players Repeat Their Choices After Winning or Losing?",
fill = "Player") +
theme_minimal()
# Plot
ggplot(dat_summary, aes(x = factor(Winner), y = PropRepeated, fill = Player)) +
geom_col(position = "dodge") +
geom_hline(yintercept = 1/3, linetype = "dashed", color = "red", linewidth = 1) +  # Add 1/3 reference line
scale_x_discrete(labels = c("-1" = "Lost", "0" = "Draw", "1" = "Won")) +
scale_fill_manual(values = c("Chiara" = my_blue, "Mona" = my_purple)) +
labs(x = "Previous Round Outcome", y = "Proportion of Repeated Choices",
title = "Did Players Repeat Their Choices After Winning or Losing?",
fill = "Player") +
theme_minimal()
# Plot
ggplot(dat_summary, aes(x = factor(Winner), y = PropRepeated, fill = Player)) +
geom_col(position = "dodge") +
geom_hline(yintercept = 1/3, linetype = "dashed", color = "red", linewidth = 1) +  # Add 1/3 reference line
scale_x_discrete(labels = c("-1" = "Lost", "0" = "Draw", "1" = "Won")) +
scale_fill_manual(values = c("Chiara" = my_grouping_col_1, "Mona" = my_grouping_col_2)) +
labs(x = "Previous Round Outcome", y = "Proportion of Repeated Choices",
title = "Did Players Repeat Their Choices After Winning or Losing?",
fill = "Player") +
theme_minimal()
# Plot
ggplot(dat_summary, aes(x = factor(Winner), y = PropRepeated, fill = Player)) +
geom_col(position = "dodge") +
geom_hline(yintercept = 1/3, linetype = "dashed", color = my_red, linewidth = 1) +  # Add 1/3 reference line
scale_x_discrete(labels = c("-1" = "Lost", "0" = "Draw", "1" = "Won")) +
scale_fill_manual(values = c("Chiara" = my_grouping_col_1, "Mona" = my_grouping_col_2)) +
labs(x = "Previous Round Outcome", y = "Proportion of Repeated Choices",
title = "Did Players Repeat Their Choices After Winning or Losing?",
fill = "Player") +
theme_minimal()
setwd("/Users/henrikgodmann/Desktop/GitHub/ModelMisspecificationRPS/plots")
setwd("/Users/henrikgodmann/Desktop/GitHub/ModelMisspecificationRPS/plots")
pdf("defect_rate_over_timeResultsSSMoptional.pdf", width = 7, height = 5)
# Plot
ggplot(dat_summary, aes(x = factor(Winner), y = PropRepeated, fill = Player)) +
geom_col(position = "dodge") +
geom_hline(yintercept = 1/3, linetype = "dashed", color = my_red, linewidth = 1) +  # Add 1/3 reference line
scale_x_discrete(labels = c("-1" = "Lost", "0" = "Draw", "1" = "Won")) +
scale_fill_manual(values = c("Chiara" = my_grouping_col_1, "Mona" = my_grouping_col_2)) +
labs(x = "Previous Round Outcome", y = "Proportion of Repeated Choices",
title = "Did Players Repeat Their Choices After Winning or Losing?",
fill = "Player") +
theme_minimal()
dev.off()
library(dplyr)
library(ggplot2)
# Function to determine what move would have won/lost
winning_move <- function(move) {
return(ifelse(move == 1, 2, ifelse(move == 2, 3, 1)))  # Rock -> Paper, Paper -> Scissors, Scissors -> Rock
}
losing_move <- function(move) {
return(ifelse(move == 1, 3, ifelse(move == 2, 1, 2)))  # Rock -> Scissors, Paper -> Rock, Scissors -> Paper
}
# Add Previous Choices and Compute Move Switches
dat <- dat %>%
mutate(
Winner = mapply(rps_winner, Chiara, Mona),
ChiaraChanged = lag(Chiara) != Chiara,
MonaChanged = lag(Mona) != Mona,
ChiaraSwitchType = case_when(
ChiaraChanged & Chiara == winning_move(lag(Chiara)) ~ "To Winning Move",
ChiaraChanged & Chiara == losing_move(lag(Chiara)) ~ "To Losing Move",
ChiaraChanged ~ "Other",
TRUE ~ NA_character_
),
MonaSwitchType = case_when(
MonaChanged & Mona == winning_move(lag(Mona)) ~ "To Winning Move",
MonaChanged & Mona == losing_move(lag(Mona)) ~ "To Losing Move",
MonaChanged ~ "Other",
TRUE ~ NA_character_
)
)
# Convert to long format and filter out Round 1
dat_long <- dat %>%
filter(Round > 1) %>%
select(Round, Winner, ChiaraSwitchType, MonaSwitchType) %>%
pivot_longer(cols = c(ChiaraSwitchType, MonaSwitchType),
names_to = "Player", values_to = "SwitchType") %>%
mutate(Player = ifelse(Player == "ChiaraSwitchType", "Chiara", "Mona")) %>%
filter(!is.na(SwitchType))  # Remove cases where no switch happened
# Compute proportions per (Winner, Player) group
dat_summary <- dat_long %>%
group_by(Winner, Player, SwitchType) %>%
summarise(Count = n(), .groups = "drop") %>%
group_by(Winner, Player) %>%
mutate(Prop = Count / sum(Count))  # Normalize by category
# Plot
ggplot(dat_summary, aes(x = factor(Winner), y = Prop, fill = SwitchType)) +
geom_col(position = "dodge") +
scale_x_discrete(labels = c("-1" = "Lost", "0" = "Draw", "1" = "Won")) +
scale_fill_manual(values = c("To Winning Move" = "green", "To Losing Move" = "red", "Other" = "gray")) +
labs(x = "Previous Round Outcome", y = "Proportion of Switch Types",
title = "Do Players Switch to Winning or Losing Moves?",
fill = "Switch Type") +
facet_wrap(~Player) +
theme_minimal()
library(dplyr)
library(ggplot2)
# Function to determine what move would have won/lost
winning_move <- function(move) {
return(ifelse(move == 1, 2, ifelse(move == 2, 3, 1)))  # Rock -> Paper, Paper -> Scissors, Scissors -> Rock
}
losing_move <- function(move) {
return(ifelse(move == 1, 3, ifelse(move == 2, 1, 2)))  # Rock -> Scissors, Paper -> Rock, Scissors -> Paper
}
# Add Previous Choices and Compute Move Switches
dat <- dat %>%
mutate(
Winner = mapply(rps_winner, Chiara, Mona),
ChiaraChanged = lag(Chiara) != Chiara,
MonaChanged = lag(Mona) != Mona,
ChiaraSwitchType = case_when(
Winner == 0 & ChiaraChanged & Chiara == winning_move(lag(Chiara)) ~ "To Winning Move",
Winner == 0 & ChiaraChanged & Chiara == losing_move(lag(Chiara)) ~ "To Losing Move",
Winner == 0 & ChiaraChanged ~ "Other",
TRUE ~ NA_character_
),
MonaSwitchType = case_when(
Winner == 0 & MonaChanged & Mona == winning_move(lag(Mona)) ~ "To Winning Move",
Winner == 0 & MonaChanged & Mona == losing_move(lag(Mona)) ~ "To Losing Move",
Winner == 0 & MonaChanged ~ "Other",
TRUE ~ NA_character_
)
)
# Convert to long format and filter only draw rounds
dat_long <- dat %>%
filter(Winner == 0 & Round > 1) %>%
select(Round, ChiaraSwitchType, MonaSwitchType) %>%
pivot_longer(cols = c(ChiaraSwitchType, MonaSwitchType),
names_to = "Player", values_to = "SwitchType") %>%
mutate(Player = ifelse(Player == "ChiaraSwitchType", "Chiara", "Mona")) %>%
filter(!is.na(SwitchType))  # Remove cases where no switch happened
# Compute proportions per Player
dat_summary <- dat_long %>%
group_by(Player, SwitchType) %>%
summarise(Count = n(), .groups = "drop") %>%
group_by(Player) %>%
mutate(Prop = Count / sum(Count))  # Normalize by category
# Plot
ggplot(dat_summary, aes(x = Player, y = Prop, fill = SwitchType)) +
geom_col(position = "dodge") +
scale_fill_manual(values = c("To Winning Move" = "green", "To Losing Move" = "red", "Other" = "gray")) +
labs(x = "Player", y = "Proportion of Switch Types",
title = "How Players Change After a Draw",
fill = "Switch Type") +
theme_minimal()
# Plot
ggplot(dat_summary, aes(x = Player, y = Prop, fill = SwitchType)) +
geom_col(position = "dodge") +
scale_fill_manual(values = c("To Winning Move" = my_green, "To Losing Move" = my_red, "Other" = "gray")) +
labs(x = "Player", y = "Proportion of Switch Types",
title = "How Players Change After a Draw",
fill = "Switch Type") +
theme_minimal()
# Expected probability under random choice
expected_prob <- c(1/3, 1/3, 1/3)
# Get observed counts
observed_counts <- dat_summary %>%
group_by(SwitchType) %>%
summarise(Count = sum(Count), .groups = "drop") %>%
pull(Count)
# Chi-squared test
chisq_test <- chisq.test(observed_counts, p = expected_prob)
# Get observed counts
observed_counts <- dat_summary %>%
group_by(SwitchType) %>%
summarise(Count = sum(Count), .groups = "drop") %>%
pull(Count)
observed_counts
chisq_test <- chisq.test(observed_counts, p = expected_prob)
observed_counts <- dat_summary %>%
group_by(SwitchType) %>%
summarise(Count = sum(Count), .groups = "drop") %>%
pull(Count)
observed_counts
observed_counts
# Ensure all switch types exist in the dataset
all_switch_types <- c("To Winning Move", "To Losing Move", "Other")
# Create a full dataset including missing categories with zero counts
dat_summary_fixed <- dat_summary %>%
complete(SwitchType = all_switch_types, fill = list(Count = 0))
# Get observed counts
observed_counts <- dat_summary_fixed$Count
# Ensure probabilities match the number of observed categories
expected_prob <- rep(1 / length(observed_counts), length(observed_counts))
# Perform the chi-squared test
chisq_test <- chisq.test(observed_counts, p = expected_prob)
# Print results
print(chisq_test)
library(dplyr)
library(ggplot2)
# Function to determine the winner of a round
rps_winner <- function(player1, player2) {
if (player1 == player2) return(0)  # Draw
if ((player1 == 1 & player2 == 3) | (player1 == 2 & player2 == 1) | (player1 == 3 & player2 == 2)) {
return(1)  # Player 1 wins
} else {
return(2)  # Player 2 wins
}
}
# Add winner/loser information
dat <- dat %>%
mutate(
Winner = mapply(rps_winner, Chiara, Mona),
ChiaraPrev = lag(Chiara),  # Previous move of Chiara
MonaPrev = lag(Mona),      # Previous move of Mona
ChiaraWonLast = lag(Winner) == 1,  # Was Chiara the winner in the last round?
MonaWonLast = lag(Winner) == 2,    # Was Mona the winner in the last round?
ChiaraSwitched = ChiaraPrev != Chiara,  # Did Chiara switch moves?
MonaSwitched = MonaPrev != Mona        # Did Mona switch moves?
)
# Convert data to long format
dat_long <- dat %>%
filter(Round > 1) %>%  # Remove first round since no previous winner
select(Round, ChiaraWonLast, MonaWonLast, ChiaraSwitched, MonaSwitched) %>%
pivot_longer(cols = c(ChiaraSwitched, MonaSwitched), names_to = "Player", values_to = "Switched") %>%
mutate(WonLast = ifelse(Player == "ChiaraSwitched", ChiaraWonLast, MonaWonLast),
Player = ifelse(Player == "ChiaraSwitched", "Chiara", "Mona"))
# Summarize switching behavior
switch_summary <- dat_long %>%
group_by(WonLast, Switched) %>%
summarise(Count = n(), .groups = "drop") %>%
group_by(WonLast) %>%
mutate(Prop = Count / sum(Count))
# Plot results
ggplot(switch_summary, aes(x = as.factor(WonLast), y = Prop, fill = as.factor(Switched))) +
geom_col(position = "dodge") +
scale_x_discrete(labels = c("0" = "Losers", "1" = "Winners")) +
scale_fill_manual(values = c("red", "green"), labels = c("Stayed", "Switched")) +
labs(x = "Previous Round Result", y = "Proportion", fill = "Action",
title = "Do Winners Stick While Losers Switch?") +
theme_minimal()
# Plot results
ggplot(switch_summary, aes(x = as.factor(WonLast), y = Prop, fill = as.factor(Switched))) +
geom_col(position = "dodge") +
scale_x_discrete(labels = c("0" = "Losers", "1" = "Winners")) +
scale_fill_manual(values = c("red", "green"), labels = c("Stayed", "Switched")) +
labs(x = "Previous Round Result", y = "Proportion", fill = "Action",
title = "Do Winners Stick While Losers Switch?") +
theme_minimal()
dev.off()
ggplot(switch_summary, aes(x = as.factor(WonLast), y = Prop, fill = as.factor(Switched))) +
geom_col(position = "dodge") +
scale_x_discrete(labels = c("0" = "Losers", "1" = "Winners")) +
scale_fill_manual(values = c("red", "green"), labels = c("Stayed", "Switched")) +
labs(x = "Previous Round Result", y = "Proportion", fill = "Action",
title = "Do Winners Stick While Losers Switch?") +
theme_minimal()
# Plot results
ggplot(switch_summary, aes(x = as.factor(WonLast), y = Prop, fill = as.factor(Switched))) +
geom_col(position = "dodge") +
scale_x_discrete(labels = c("0" = "Losers", "1" = "Winners")) +
scale_fill_manual(values = c(my_red, my_green), labels = c("Stayed", "Switched")) +
labs(x = "Previous Round Result", y = "Proportion", fill = "Action",
title = "Do Winners Stick While Losers Switch?") +
theme_minimal()
# Summarize switching behavior
switch_summary <- dat_long %>%
group_by(WonLast, Switched) %>%
summarise(Count = n(), .groups = "drop") %>%
group_by(WonLast) %>%
mutate(Prop = Count / sum(Count))
# Convert WonLast to "Losers" and "Winners"
switch_summary <- switch_summary %>%
mutate(WonLast = ifelse(WonLast, "Winners", "Losers"),
Switched = ifelse(Switched, "Switched", "Stayed"))
# Plot results
ggplot(switch_summary, aes(x = as.factor(WonLast), y = Prop, fill = as.factor(Switched))) +
geom_col(position = "dodge") +
scale_x_discrete(labels = c("0" = "Losers", "1" = "Winners")) +
scale_fill_manual(values = c(my_red, my_green), labels = c("Stayed", "Switched")) +
labs(x = "Previous Round Result", y = "Proportion", fill = "Action",
title = "Do Winners Stick While Losers Switch?") +
theme_minimal()
# Plot with corrected labels
ggplot(switch_summary, aes(x = WonLast, y = Prop, fill = Switched)) +
geom_col(position = "dodge") +
scale_fill_manual(values = c("Stayed" = my_red, "Switched" = my_green)) +
labs(x = "Previous Round Result", y = "Proportion", fill = "Action",
title = "Do Winners Stick While Losers Switch?") +
theme_minimal()
